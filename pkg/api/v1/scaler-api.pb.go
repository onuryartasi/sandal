// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scaler-api.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Containers struct {
	Container            []*Container `protobuf:"bytes,1,rep,name=container,proto3" json:"container,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Containers) Reset()         { *m = Containers{} }
func (m *Containers) String() string { return proto.CompactTextString(m) }
func (*Containers) ProtoMessage()    {}
func (*Containers) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e55e8ce18b80753, []int{0}
}

func (m *Containers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Containers.Unmarshal(m, b)
}
func (m *Containers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Containers.Marshal(b, m, deterministic)
}
func (m *Containers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Containers.Merge(m, src)
}
func (m *Containers) XXX_Size() int {
	return xxx_messageInfo_Containers.Size(m)
}
func (m *Containers) XXX_DiscardUnknown() {
	xxx_messageInfo_Containers.DiscardUnknown(m)
}

var xxx_messageInfo_Containers proto.InternalMessageInfo

func (m *Containers) GetContainer() []*Container {
	if m != nil {
		return m.Container
	}
	return nil
}

type Container struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Names                []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
	Image                string   `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Container) Reset()         { *m = Container{} }
func (m *Container) String() string { return proto.CompactTextString(m) }
func (*Container) ProtoMessage()    {}
func (*Container) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e55e8ce18b80753, []int{1}
}

func (m *Container) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Container.Unmarshal(m, b)
}
func (m *Container) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Container.Marshal(b, m, deterministic)
}
func (m *Container) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Container.Merge(m, src)
}
func (m *Container) XXX_Size() int {
	return xxx_messageInfo_Container.Size(m)
}
func (m *Container) XXX_DiscardUnknown() {
	xxx_messageInfo_Container.DiscardUnknown(m)
}

var xxx_messageInfo_Container proto.InternalMessageInfo

func (m *Container) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Container) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *Container) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

type ContainerId struct {
	ContainerId          string   `protobuf:"bytes,1,opt,name=containerId,proto3" json:"containerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContainerId) Reset()         { *m = ContainerId{} }
func (m *ContainerId) String() string { return proto.CompactTextString(m) }
func (*ContainerId) ProtoMessage()    {}
func (*ContainerId) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e55e8ce18b80753, []int{2}
}

func (m *ContainerId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContainerId.Unmarshal(m, b)
}
func (m *ContainerId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContainerId.Marshal(b, m, deterministic)
}
func (m *ContainerId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerId.Merge(m, src)
}
func (m *ContainerId) XXX_Size() int {
	return xxx_messageInfo_ContainerId.Size(m)
}
func (m *ContainerId) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerId.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerId proto.InternalMessageInfo

func (m *ContainerId) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func init() {
	proto.RegisterType((*Containers)(nil), "v1.containers")
	proto.RegisterType((*Container)(nil), "v1.container")
	proto.RegisterType((*ContainerId)(nil), "v1.containerId")
}

func init() { proto.RegisterFile("scaler-api.proto", fileDescriptor_4e55e8ce18b80753) }

var fileDescriptor_4e55e8ce18b80753 = []byte{
	// 243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x8f, 0xd1, 0x4a, 0x84, 0x40,
	0x14, 0x86, 0x51, 0x29, 0xf0, 0x2c, 0x6b, 0xcb, 0x21, 0x42, 0xec, 0x46, 0xbc, 0x12, 0xa2, 0x11,
	0xed, 0x22, 0x7a, 0x80, 0x88, 0x85, 0xae, 0xdc, 0x27, 0x98, 0xd5, 0x93, 0x0c, 0xac, 0x8e, 0xcc,
	0x4c, 0x42, 0xaf, 0xd5, 0x13, 0xc6, 0x6a, 0x4d, 0x63, 0x37, 0x5d, 0x7e, 0xdf, 0xfc, 0xff, 0x61,
	0x7e, 0xd8, 0xe9, 0x86, 0x9f, 0x48, 0xdd, 0xf3, 0x51, 0xb0, 0x51, 0x49, 0x23, 0xd1, 0x9f, 0xca,
	0xe4, 0xb6, 0x93, 0xb2, 0x3b, 0x51, 0x31, 0x9b, 0xe3, 0xfb, 0x5b, 0x41, 0xfd, 0x68, 0x3e, 0x96,
	0x40, 0xf6, 0x04, 0xd0, 0xc8, 0xc1, 0x70, 0x31, 0x90, 0xd2, 0x78, 0x07, 0xa1, 0xa5, 0xd8, 0x4b,
	0x83, 0x7c, 0x53, 0x6d, 0xd9, 0x54, 0x32, 0x2b, 0xeb, 0xdf, 0xf7, 0xec, 0xc5, 0x09, 0x63, 0x04,
	0xbe, 0x68, 0x63, 0x2f, 0xf5, 0xf2, 0xb0, 0xf6, 0x45, 0x8b, 0xd7, 0x70, 0x31, 0xf0, 0x9e, 0x74,
	0xec, 0xa7, 0x41, 0x1e, 0xd6, 0x0b, 0x9c, 0xad, 0xe8, 0x79, 0x47, 0x71, 0x30, 0x07, 0x17, 0xc8,
	0x0a, 0xd8, 0xd8, 0x43, 0xfb, 0x16, 0xd3, 0x15, 0x7e, 0xdf, 0x74, 0x55, 0xf5, 0xe9, 0xc1, 0xce,
	0xf2, 0x81, 0xd4, 0x24, 0x1a, 0xc2, 0x47, 0xd8, 0x5a, 0xf7, 0x2a, 0xb4, 0xc1, 0x1b, 0xb6, 0x0c,
	0x67, 0x3f, 0xc3, 0xd9, 0xf3, 0x79, 0x78, 0x12, 0xad, 0x16, 0x69, 0x2c, 0x9d, 0xe2, 0xc1, 0xc8,
	0x11, 0xaf, 0x56, 0x81, 0x7d, 0x9b, 0xfc, 0x15, 0x58, 0x41, 0xe4, 0x54, 0xb8, 0x32, 0xff, 0x77,
	0x8e, 0x97, 0xf3, 0x37, 0x1e, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff, 0x03, 0xb6, 0x08, 0x27, 0xa5,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ContainerServiceClient is the client API for ContainerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContainerServiceClient interface {
	ContainerList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Containers, error)
	ContainerStop(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*ContainerId, error)
	ContainerStart(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*ContainerId, error)
}

type containerServiceClient struct {
	cc *grpc.ClientConn
}

func NewContainerServiceClient(cc *grpc.ClientConn) ContainerServiceClient {
	return &containerServiceClient{cc}
}

func (c *containerServiceClient) ContainerList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Containers, error) {
	out := new(Containers)
	err := c.cc.Invoke(ctx, "/v1.containerService/containerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) ContainerStop(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*ContainerId, error) {
	out := new(ContainerId)
	err := c.cc.Invoke(ctx, "/v1.containerService/containerStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) ContainerStart(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*ContainerId, error) {
	out := new(ContainerId)
	err := c.cc.Invoke(ctx, "/v1.containerService/containerStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContainerServiceServer is the server API for ContainerService service.
type ContainerServiceServer interface {
	ContainerList(context.Context, *empty.Empty) (*Containers, error)
	ContainerStop(context.Context, *ContainerId) (*ContainerId, error)
	ContainerStart(context.Context, *ContainerId) (*ContainerId, error)
}

func RegisterContainerServiceServer(s *grpc.Server, srv ContainerServiceServer) {
	s.RegisterService(&_ContainerService_serviceDesc, srv)
}

func _ContainerService_ContainerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).ContainerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.containerService/ContainerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).ContainerList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_ContainerStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).ContainerStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.containerService/ContainerStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).ContainerStop(ctx, req.(*ContainerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_ContainerStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).ContainerStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.containerService/ContainerStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).ContainerStart(ctx, req.(*ContainerId))
	}
	return interceptor(ctx, in, info, handler)
}

var _ContainerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.containerService",
	HandlerType: (*ContainerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "containerList",
			Handler:    _ContainerService_ContainerList_Handler,
		},
		{
			MethodName: "containerStop",
			Handler:    _ContainerService_ContainerStop_Handler,
		},
		{
			MethodName: "containerStart",
			Handler:    _ContainerService_ContainerStart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scaler-api.proto",
}
